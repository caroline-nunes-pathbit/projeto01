const URL_BASE = "http://0.0.0.0:5000";

async function userRegister({ name, userName, userEmail, password, userType }) {
    console.log("üì§ Tentando cadastrar usu√°rio:", { name, userName, userEmail, password, userType });

    try {
        const response = await fetch(`${URL_BASE}/api/user/signup`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, userName, userEmail, password, userType })
        });

        console.log("üîÑ Status da resposta:", response.status, response.statusText);

        const data = await response.json();
        console.log("üì• Resposta da API:", data);

        if (!response.ok) {
            console.error("üö® Erro ao cadastrar:", data.message || "Erro desconhecido");
            throw new Error(`Erro ao cadastrar o usu√°rio: ${data.message || "Erro desconhecido"}`);
        }

        console.log("‚úÖ Cadastro realizado com sucesso!");
        return data;
    } catch (error) {
        console.error("üö® Erro na requisi√ß√£o de cadastro:", error);
        throw error;
    }
}

// Fun√ß√£o para login
async function userLogin({ userEmail, password }) {
    console.log("üì§ Tentando login com:", { userEmail, password });

    try {
        const response = await fetch(`${URL_BASE}/api/user/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userEmail, password })
        });

        console.log("üîÑ Status da resposta:", response.status, response.statusText);

        let data;
        try {
            data = await response.json();
        } catch (jsonError) {
            console.error("‚ö†Ô∏è Resposta da API n√£o √© um JSON v√°lido:", jsonError);
            throw new Error(`Erro inesperado. Status: ${response.status}`);
        }

        console.log("üì• Resposta da API:", data);

        if (!response.ok) {
            console.error("Erro no login:", data.message || "Credenciais inv√°lidas");
            throw new Error(`Erro no login: ${data.message || "Credenciais inv√°lidas"}`);
        }

        console.log("Login realizado com sucesso!");

        // Salva o tipo de usu√°rio e o token no localStorage
        localStorage.setItem("token", data.token);
        localStorage.setItem("userType", data.userType); // Salva o tipo de usu√°rio

        // Verifica e renderiza a interface
        renderInterface();

        return data;
    } catch (error) {
        console.error("Erro na requisi√ß√£o de login:", error);
        throw error;
    }
}

// Fun√ß√£o para renderizar a interface com base no tipo de usu√°rio
function renderInterface() {
    const userType = localStorage.getItem("userType");

    // Esconde ambas as interfaces
    document.getElementById('adminInterface').classList.add('hidden');
    document.getElementById('clientInterface').classList.add('hidden');

    // Verifica o tipo de usu√°rio e exibe a interface correspondente
    if (userType === 'admin') {
        document.getElementById('adminInterface').classList.remove('hidden');
    } else if (userType === 'client') {
        document.getElementById('clientInterface').classList.remove('hidden');
    } else {
        console.error("Tipo de usu√°rio desconhecido.");
    }
}

// Verificar Autentica√ß√£o
function isAuthenticated() {
    const token = localStorage.getItem("token");
    console.log(`Verificando autentica√ß√£o: ${token ? "Autenticado" : "N√£o autenticado"}`);
    return token !== null;
}

window.onload = function() {
    if (isAuthenticated()) {
        renderInterface(); // Se j√° estiver autenticado, renderiza a interface automaticamente
    } else {
        alert("Voc√™ n√£o est√° autenticado. Por favor, fa√ßa login.");
    }
};

// Obter Tipo de Usu√°rio
function getUserType() {
    const userType = localStorage.getItem("userType");
    console.log("Tipo de usu√°rio:", userType);
    return userType;
}

// Logout
function logout() {
    console.log("Realizando logout");
    localStorage.removeItem("token");
    localStorage.removeItem("userType");
    console.log("Token e tipo de usu√°rio removidos.");
    window.location.href = "index.html"; // Redirecionar para a p√°gina inicial
}

// Fun√ß√£o para incluir o token no cabe√ßalho das requisi√ß√µes autenticadas
function getAuthHeaders() {
    const token = localStorage.getItem("token");
    if (!token) {
        console.error("Usu√°rio n√£o autenticado. Token n√£o encontrado.");
        throw new Error("Usu√°rio n√£o autenticado.");
    }

    console.log("Cabe√ßalho de autentica√ß√£o gerado.");
    return {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
    };
}

export { userRegister, userLogin, renderInterface, isAuthenticated, getUserType, logout, getAuthHeaders };
